{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Description here.",
    "Parameters": {
        "LatestAmiId": {
            "Type": "AWS::EC2::Image::Id",
            "Default": "ami-00d7aa0cdc52740b5"
        },
        "SubnetAvailabilityZone1": {
            "Description": "Availability Zone for Subnet 1",
            "Type": "String",
            "Default": "{{this.default_region}}a"
        },
        "SubnetAvailabilityZone2": {
            "Description": "Availability Zone for Subnet 2",
            "Type": "String",
            "Default": "{{this.default_region}}b"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "EC2 container instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Resources": {
        "Cluster": {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
                "ClusterName" : "{{this.project_name}}"
            }
        },
        "CodeBuild": {
            "Type" : "AWS::CodeBuild::Project",
            "Properties" : {
                "Artifacts" : {
                    "Type": "NO_ARTIFACTS"
                },
                "Cache" : {
                    "Type": "NO_CACHE"
                },
                "Environment" : {
                    "Type": "LINUX_CONTAINER",
                    "Image": "aws/codebuild/standard:4.0",
                    "ComputeType": "BUILD_GENERAL1_SMALL",
                    "EnvironmentVariables": [
                        {{#each this.secret_envs}}
                        {
                        "Name": "{{this.key}}",
                        "Value": "{{this.value}}",
                        "Type": "{{this.type}}"
                        }{{~#unless @last}},{{/unless}}
                        {{/each}}
                    ],
                    "PrivilegedMode": true,
                    "ImagePullCredentialsType": "CODEBUILD"
                },
                "LogsConfig" : {
                    "CloudWatchLogs": {
                        "Status": "ENABLED"
                    },
                    "S3Logs": {
                        "Status": "DISABLED",
                        "EncryptionDisabled": false
                    }
                },
                "Name" : "{{this.project_name}}",
                "ServiceRole" : {"Ref": "CodeBuildServiceRole"},
                "Source" : {
                    "Type": "GITHUB",
                    "Location": "{{this.git_repo_location}}",
                    "GitCloneDepth": 1,
                    "GitSubmodulesConfig": {
                        "FetchSubmodules": false
                    },
                    "ReportBuildStatus": false,
                    "InsecureSsl": false
                }
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet2"
                    }
                ]
            }
        },
        "HTTPListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Protocol" : "HTTP",
                "Port": 80,
                "DefaultActions": [
                    {
                        "Order": 1,
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "TargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                }
            }
        },
        "CodeBuildServiceRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : 
                {
                  "Version" : "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "codebuild.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  } ]
               },
                "Policies" : [
                    {
                        "PolicyName": "CodeBuildPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:CompleteLayerUpload",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:InitiateLayerUpload",
                                        "ecr:PutImage",
                                        "ecr:UploadLayerPart"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:{{~this.default_region~}}:{{~this.aws_account_id~}}:log-group:/aws/codebuild/{{~this.project_name~}}",
                                        "arn:aws:logs:{{~this.default_region~}}:{{~this.aws_account_id~}}:log-group:/aws/codebuild/{{~this.project_name~}}:*"
                                    ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::codepipeline-{{~this.default_region~}}-*"
                                    ],
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:GetBucketAcl",
                                        "s3:GetBucketLocation"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codebuild:CreateReportGroup",
                                        "codebuild:CreateReport",
                                        "codebuild:UpdateReport",
                                        "codebuild:BatchPutTestCases",
                                        "codebuild:BatchPutCodeCoverages"
                                    ],
                                    "Resource": [
                                        "arn:aws:codebuild:{{~this.default_region~}}:{{~this.aws_account_id~}}:report-group/{{~this.project_name~}}-*"
                                    ]
                                }
                            ]
                        }
                    }       
                ]
            }
        },
        "TaskServiceRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" :
                {
                    "Version" : "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "ecs-tasks.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  } ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
                ]
            }
        },
        "ServiceServiceRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" :
                {
                  "Version" : "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "ecs.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  } ]
               },
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
                ]
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "SubnetAvailabilityZone1"
                },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": true
            }
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "SubnetAvailabilityZone2"
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": true
            }
        },
        "Subnet1RT":{
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "RouteTableId" : { "Ref": "RouteTable" },
                    "SubnetId" : { "Ref": "Subnet1" }
                }
        },
        "Subnet2RT":{
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "RouteTableId" : { "Ref": "RouteTable" },
                    "SubnetId" : { "Ref": "Subnet2" }
                }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "VpcId" : {"Ref": "VPC"},
                "Port" : 80,
                "Protocol" : "HTTP",
                "Targets": [
                    
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"VPC"
                }
            }
        },
        "Route":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "DestinationCidrBlock":"0.0.0.0/0",
                "GatewayId":{
                    "Ref":"InternetGateway"
                },
                "RouteTableId":{
                    "Ref":"RouteTable"
                }
            }
        },
        "TaskDefinition": {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ContainerDefinitions" : [ 
                    {
                        "Command" : [
                            "{{this.command_string}}"
                        ],
                        "Environment" : [ 
                            {{#each this.run_envs}}
                            {
                            "Name": "{{this.key}}",
                            "Value": "{{this.value}}"
                            }{{~#unless @last}},{{/unless}}
                            {{/each}}
                         ],
                        "Image" : { "Ref": "Repository"},
                        "MemoryReservation": "128",
                        "Name" : "{{this.project_name}}",
                        "PortMappings" : [
                            {
                                "ContainerPort": 3000,
                                "HostPort": 80
                            }
                        ]
                    }
                 ],
                "TaskRoleArn": {"Ref": "TaskServiceRole"}
            }
        },
        "Repository": {
            "Type" : "AWS::ECR::Repository",
            "Properties" : {
                "RepositoryName" : "{{this.project_name}}"
            }
        },
        "Service": {
            "Type" : "AWS::ECS::Service",
            "Properties" : {
                "Cluster" : {
                    "Ref": "Cluster"
                },
                "DesiredCount" : 1,
                "ServiceName" : "{{this.project_name}}",
                "TaskDefinition" : {"Ref": "TaskDefinition"}
            },
            "DependsOn": "ContainerInstances"
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            }
        },
         "ContainerInstances":{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": true,
                "ImageId": {"Ref": "LatestAmiId"},
                "InstanceType": {"Ref": "InstanceType"},
                "KeyName": {"Ref": "KeyName"}
            },
            "DependsOn":[
                "VPC"
            ],
            "Metadata":{
                "AWS::CloudFormation::Init":{
                "config":{
                    "commands":{
                    "01_add_instance_to_cluster": {
                        "command":{
                            "Fn::Join":[
                                "",
                                [
                                "#!/bin/bash\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref":"Cluster"
                                },
                                " >> /etc/ecs/ecs.config"
                                ]
                            ]
                        }
                    }
                    },
                    "files":{
                    "/etc/cfn/cfn-hup.conf":{
                        "content":{
                        "Fn::Join":[
                            "",
                            [
                            "[main]\n",
                            "stack=",
                            {
                                "Ref":"AWS::StackId"
                            },
                            "\n",
                            "region=",
                            {
                                "Ref":"AWS::Region"
                            },
                            "\n"
                            ]
                        ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                    },
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                        "Fn::Join":[
                            "",
                            [
                            "[cfn-auto-reloader-hook]\n",
                            "triggers=post.update\n",
                            "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                            "action=/opt/aws/bin/cfn-init -v ",
                            "         --stack ",
                            {
                                "Ref":"AWS::StackName"
                            },
                            "         --resource ContainerInstances ",
                            "         --region ",
                            {
                                "Ref":"AWS::Region"
                            },
                            "\n",
                            "runas=root\n"
                            ]
                        ]
                        }
                    }
                    }
                    }
                }
            }
        },
    "ECSAutoScalingGroup":{
        "Type":"AWS::AutoScaling::AutoScalingGroup",
            "DependsOn":[
                "VPC"
            ],
            "Properties":{
            "VPCZoneIdentifier":[
                {
                "Ref":"Subnet1"
                },
                {
                "Ref":"Subnet2"
                }
            ],
            "LaunchConfigurationName":{
                "Ref":"ContainerInstances"
            },
            "MinSize":"1",
            "MaxSize":"2",
            "DesiredCapacity":"1"
            },
            "CreationPolicy":{
                "ResourceSignal":{
                    "Timeout":"PT15M"
                }
            },
            "UpdatePolicy":{
                "AutoScalingRollingUpdate":{
                    "MinInstancesInService":"1",
                    "MaxBatchSize":"1",
                    "PauseTime":"PT15M",
                    "WaitOnResourceSignals":true
                }
            }
        }
    }
}